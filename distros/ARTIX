#!/usr/bin/env bash
#-------------------------------------------------------------------------
#      _          _    __  __      _   _
#     /_\  _ _ __| |_ |  \/  |__ _| |_(_)__
#    / _ \| '_/ _| ' \| |\/| / _` |  _| / _|
#   /_/ \_\_| \__|_||_|_|  |_\__,_|\__|_\__|
#  Artix Linux Post Install Setup and Config
#-------------------------------------------------------------------------
echo "Please enter hostname:"
read hostname
echo "Please enter username:"
read username
echo "Please enter password:"
read -s password
echo "Please repeat password:"
read -s password2
# Check both passwords match
if [ "$password" != "$password2" ]; then
    echo "Passwords do not match"
    exit 1
fi
printf "hostname="$hostname"\n" > "install.conf"
printf "username="$username"\n" > "install.conf"
printf "password="$password"\n" > "install.conf"


echo -e "\nInstalling prereqs...\n$HR"
pacman -Sy --noconfirm gptfdisk btrfs-progs dialog

echo "-------------------------------------------------"
echo "-------select your disk to format----------------"
echo "-------------------------------------------------"
lsblk
echo "Please enter disk: (example /dev/sda)"
read DISK

echo "--------------------------------------"
echo -e "\nFormatting disk...\n$HR"
echo "--------------------------------------"

#This segment check how much ram do you have instaled in your system and creates little bit bigger swap partition
echo "Memory chceck debug"
mem_quantity=$(grep MemTotal /proc/meminfo | awk '{print $2}')
UNIT=$(grep MemTotal /proc/meminfo | awk '{print $3}')
mem_multipiler=$(echo $(($mem_quantity / 9)))
mem=$(echo $(($mem_multipiler + $mem_quantity)))
echo $mem_quantity
echo $UNIT
echo $mem_multipiler
echo $mem
read pause

#Checking if selected disk is unmounted
umount ${DISK}/*


# disk prep
sgdisk -Z ${DISK} # zap all on disk
sgdisk -a 2048 -o ${DISK} # new gpt disk 2048 alignment

# create partitions
sgdisk -n 1:0:+1000M ${DISK}
sgdisk -n 3:0:+$mem$UNIT ${DISK} 
sgdisk -n 2:0:     ${DISK} 

#This if statement check drive type because nvme partisions ar named with letter p before partiton
if [[ -d "/sys/firmware/efi/efivars" ]]
then

	sgdisk -a 2048 -o ${DISK} # new gpt disk 2048 alignment
	if [[ ${DISK} == *nvme* ]];
	then
		echo "your disc standard is nvme"

		export BOOT="${DISK}p1"
		export ROOT="${DISK}p2"
		export SWAP="${DISK}p3"
	else
		echo "your disc standard is SATA"
		export BOOT="${DISK}1"
		export ROOT="${DISK}2"
		export SWAP="${DISK}3"
	fi
	# create partitions
	sgdisk -n 1:0:+1000M ${DISK}
	sgdisk -n 3:0:+$mem$unit ${DISK} 
	sgdisk -n 2:0:     ${DISK} 

	# set partition types
	sgdisk -t 1:ef00 ${DISK}
	sgdisk -t 2:8300 ${DISK}
	sgdisk -t 3:8200 ${DISK}

	# label partitions
	sgdisk -c 1:"UEFISYS" $BOOT
	sgdisk -c 2:"ROOT" $ROOT

	# make filesystems
	echo -e "\nCreating Filesystems...\n$HR"

	mkfs.vfat -F32 $BOOT
	mkfs.ext4 -L "ROOT" $ROOT
	mkswap $SWAP

	# mount target
	mkdir -p /mnt
	mount $ROOT /mnt
	mkdir -p /mnt/boot
	mount $BOOT /mnt/boot/
	swapon $SWAP




else	#if booted in legacy mode
	wipefs -fa ${DISK}
	if [[ ${DISK} == *nvme* ]];
	then
		echo "your disc standard is nvme"

		export ROOT="${DISK}p1"
		export SWAP="${DISK}p2"
	else
		echo "your disc standard is SATA"
		export ROOT="${DISK}1"
		export SWAP="${DISK}2"
	fi

	(
		echo o
		echo n
		echo p
		echo 1
		echo
		echo -${mem}K
		echo t
		echo 8
		echo 2
		echo w
	) | fdisk ${DISK}
	(
		echo n
		echo p
		echo 2
		echo
		echo
		echo w
	) | fdisk ${DISK}

	# make filesystems
	echo -e "\nCreating Filesystems...\n$HR"

	mkfs.ext4 -L "ROOT" $ROOT
	mkswap $SWAP

	# mount target
	mkdir -p /mnt
	mount $ROOT /mnt
	swapon $SWAP


fi


echo "--------------------------------------"
echo "-- Arch Install on Main Drive       --"
echo "--------------------------------------"

basestrap /mnt base base-devel linux-zen linux-firmware linux-zen-headers vim  mesa-demos grub efibootmgr os-prober --noconfirm # --needed
echo "press any key to continue"
read pause


basestrap /mnt  git neofetch 
#select your init system menu
INIT=$(dialog --clear --title "Select prefered init system" --backtitle "BASH" --radiolist "Optional support for:" 11 40 4  openrc "OPENrc init system" "off" runit "runiti init system" "on" s6 "s6 init system" "off"  --stdout)

if [[ $INIT == *init* ]];
then
	basestrap /mnt openrc elogind-openrc networkmanager networkmanager-openrc dhcpcd-openrc
	basestrap /mnt rc-update add connmand
	basestrap /mnt rc-update add NetworkManager 

elif [[ $INIT  == *runit* ]];
then
	basestrap /mnt runit elogind-runit connman-runit connman-gtk networkmanager networkmanager-runit dhcpcd-runit
	ln -s /mnt/etc/runit/sv/connmand /mnt/etc/runit/runsvdir/default	
	basestrap /mnt ln -s /mnt/etc/runit/sv/NetworkManager /mnt/run/runit/service
elif [[ $INIT == *s6* ]];
then
	basestrap /mnt s6 elogind-s6 networkmanager networkmanager-s6 dhcpcd-s6
	basestrap /mnt s6-rc-bundle -c /etc/s6/rc/compiled add default connmand
fi




CPU=$( grep -m 1 vendor_id /proc/cpuinfo  | awk '{print $3} ') # This line checks CPU vendor. It will be usefull when we would want to install microcode for our cpu
if [ $CPU = GenuineIntel ]
then
	basestrap /mnt intel-ucode --noconfirm --needed
elif [ $CPU = AuthenticAMD ]
then
	basestrap /mnt amd-ucode --noconfirm --needed
else
	echo "Can't recognize CPU vendor"
fi
fstabgen -U /mnt >> /mnt/etc/fstab

#Detecting Installed GPU and installing adequate drivers

GPU=$(glxinfo | grep "Device")
if [[ ${GPU} == *Radeon* ]];
then
	echo "your GPU vendor is AMD"
	basestrap-chroot /mnt xf86-video-amdgpu
fi
if [[ ${GPU} == *Intel* ]];
then
	echo your GPU vendor is Intel
	basestrap-chroot /mnt xf86-video-intel
fi
if [[ ${GPU} == *NV* ]];
then
	echo your GPU vendor is NVidia
	basestrap-chroot  /mnt nvidia
fi


echo "--------------------------------------"
echo "-- Preparing users locales and other--"
echo "--------------------------------------"

#Setting up User
artools-chroot /mnt useradd -m -G wheel,uucp,video,audio,storage,games,input $username
echo "$username:$password" | artools-chroot /mnt chpasswd 
echo "root:$password" | artools-chroot /mnt chpasswd  
# artools-chroot /mnt usermod -aG wheel,audio,video,optical,storage $username #adding suer to groups
# Add sudo no password rights
sed -i 's/^# %wheel ALL=(ALL) NOPASSWD: ALL/%wheel ALL=(ALL) NOPASSWD: ALL/' /mnt/etc/sudoers

#Setting hostname and hosts file
echo $hostname > /mnt/etc/hostname
echo "127.0.0.1   localhost" > /mnt/etc/hosts
echo "::1        	localhost" >> /mnt/etc/hosts
echo "127.0.1.1   $hostname.localdomain $hostname" >> /mnt/etc/hosts

#Setting Locales
echo "LANG=pl_PL.UTF-8" > /mnt/etc/locale.conf
sed -i 's/^#en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/' /mnt/etc/locale.gen
artools-chroot /mnt locale-gen
artools-chroot /mnt hwclock --systohc
# Set keymaps
artools-chroot /mnt localectl --no-ask-password set-keymap us

echo "--------------------------------------"
echo "--     Bootloader  Installation     --"
echo "--------------------------------------"

#setting up grub bootloader 
if [[ -d "/sys/firmware/efi/efivars" ]]
then
	mkdir /mnt/boot/efi
	artools-chroot /mnt grub-install --target=x86_64-efi --bootloader-id=ARTIX --efi-directory=/boot
	artools-chroot /mnt grub-mkconfig -o /boot/grub/grub.cfg
else
	artools-chroot /mnt grub-install ${DISK}
	artools-chroot /mnt grub-mkconfig -o /boot/grub/grub.cfg
fi

#setting up makepkg flags
nc=$(grep -c ^processor /proc/cpuinfo)
echo "You have " $nc" cores."
echo "-------------------------------------------------"
echo "Changing the makeflags for "$nc" cores."
sed -i 's/#MAKEFLAGS="-j2"/MAKEFLAGS="-j'$nc'"/g' /mnt/etc/makepkg.conf
echo "Changing the compression settings for "$nc" cores."
sed -i 's/COMPRESSXZ=(xz -c -z -)/COMPRESSXZ=(xz -c -T '$nc' -z -)/g' /mnt/etc/makepkg.conf

echo "Base Networking"
# artools-chroot /mnt systemctl enable NetworkManager

#This line clone my personal postinstall script
git clone https://github.com/edwardbas-pl/arch-postinstall /mnt/home/$username/arch-postinstall
artools-chroot /mnt chown $username /home/$username/arch-postinstall

#umount -R /mnt

echo "--------------------------------------"
echo "--   SYSTEM READY FOR FIRST BOOT    --"
echo "--------------------------------------"
